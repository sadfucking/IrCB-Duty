# TODO: –æ –≥–æ—Å–ø–æ–¥–∏ —á—Ç–æ –∑–∞ –¥–µ—Ä—å–º–æ
from idm.objects import dp, MySignalEvent, DB
from idm.api_utils import get_last_th_msgs
from datetime import datetime, date, timezone, timedelta
import time, re, requests, os, io, json
from microvk import VkApi

@dp.longpoll_event_register('–ø—É—à–∏')
@dp.my_signal_event_register('–ø—É—à–∏', '—É–≤–µ–¥—ã')
def mention_search(event: MySignalEvent):
    mention = f'[id{event.db.duty_id}|'
    msg_ids = []

    for msg in get_last_th_msgs(event.chat.peer_id, event.api):
        if event.time - msg['date'] >= 86400: break
        if mention in msg['text']:
            msg_ids.append(str(msg['id']))

    if not msg_ids: msg = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª üòü'
    else: msg = '–°–æ–±—Å–Ω–∞, –≤–æ—Ç —á—Ç–æ –Ω–∞—à–µ–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:'

    event.msg_op(1, msg, forward_messages = ','.join(msg_ids))
    return "ok"


@dp.my_signal_event_register('–∫—Å–º—Å')
def tosms(event: MySignalEvent):
    cm_id = re.search(r'\d+', event.msg['text'])[0]
    msg = event.api('messages.getByConversationMessageId',
                    conversation_message_ids=cm_id,
                    peer_id=event.chat.peer_id)['items']
    if msg:
        if msg[0].get('action'):
            event.msg_op(2, '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å')
        else:
            event.msg_op(1, '–í–æ—Ç –µ–Ω—Ç–∞:', forward_messages = msg[0]['id'])
    else:
        event.msg_op(2, '‚ùó –í–ö –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
    return "ok"


@dp.longpoll_event_register('—Ä–µ—Å')
@dp.longpoll_event_register('—Ä–µ—Å—Ç–∞—Ä—Ç')
@dp.my_signal_event_register('—Ä–µ—Å—Ç–∞—Ä—Ç')
def restart(event: MySignalEvent) -> str:
    import uwsgi
    uwsgi.reload()
    event.msg_op(2, 'ok —Ä–µ—Å—Ç–∞—Ä—Ç')
    time.sleep(3)
    event.msg_op(3)
    return "ok"


@dp.my_signal_event_register('—Ç–µ—Å—Ç')
def test(event: MySignalEvent) -> dict:
    return {"response":"error","error_code":"0","error_message":"–û–ø–∞, –∫–∞—Å—Ç–æ–º–∫–∏ –ø–æ–¥–≤–µ–∑–ª–∏"}

@dp.longpoll_event_register('–≤—Ä–µ–º—è')
@dp.my_signal_event_register('–≤—Ä–µ–º—è')
def timecheck(event: MySignalEvent) -> str:
    ct = datetime.now(timezone(timedelta(hours=+3))).strftime("%d of %B %Y (%j day in year)\n%H:%M:%S (%I:%M %p)")
    event.msg_op(1, ct)
    return "ok"


@dp.longpoll_event_register('—Å–ø–∞–º')
@dp.my_signal_event_register('—Å–ø–∞–º')
def spam(event: MySignalEvent) -> str:
    count = 1
    delay = 0.5
    if event.args != None:
        if event.args[0] == '–∫–∞–ø—á–∞':
            count = 100
        else:
            count = int(event.args[0])
        if len(event.args) > 1:
            delay = int(event.args[1])
    if event.payload:
        for i in range(count):
            event.msg_op(1, event.payload)
            time.sleep(delay)
    else:
        for i in range(count):
            event.msg_op(1, f'spamming {i+1}/{count}')
            time.sleep(delay)
    return "ok"

@dp.longpoll_event_register('–ø—Ä–æ—á–∏—Ç–∞—Ç—å')
@dp.my_signal_event_register('–ø—Ä–æ—á–∏—Ç–∞—Ç—å')
def readmes(event: MySignalEvent) -> str:
    restricted = {'user'}
    if event.args:
        if event.args[0].lower() in {'–≤—Å–µ', '–≤—Å—ë'}:
            restricted = set()
        elif event.args[0].lower() == '–±–µ—Å–µ–¥—ã':
            restricted = {'group', 'user'}
        elif event.args[0].lower() == '–≥—Ä—É–ø–ø—ã':
            restricted = {'chat', 'user'}
    event.msg_op(2, "üïµ‚Äç‚ôÇ –ß–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    convers = event.api('messages.getConversations', count=200)['items']
    chats = private = groups = 0
    to_read = []
    code = 'API.messages.markAsRead({"peer_id": %s});'
    to_execute = ''
    for conv in convers:
        conv = conv['conversation']
        if conv['in_read'] != conv['last_message_id']:
            if conv['peer']['type'] in restricted:
                continue
            to_read.append(conv['peer']['id'])
            if conv['peer']['type'] == 'chat': chats += 1
            elif conv['peer']['type'] == 'user': private += 1
            elif conv['peer']['type'] == 'group': groups += 1

    while len(to_read) > 0:
        for _ in range(25 if len(to_read) > 25 else len(to_read)):
            to_execute += code % to_read.pop()
        event.api.exe(to_execute, event.db.me_token)
        time.sleep(0.1)  # TODO: —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω—É–∂–Ω–æ –Ω–∞ PA?
        to_execute = ''

    message = '‚úÖ –î–∏–∞–ª–æ–≥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:'
    if chats: message += f'\n–ë–µ—Å–µ–¥—ã: {chats}'
    if private: message += f'\n–õ–∏—á–Ω—ã–µ: {private}'
    if groups: message += f'\n–ì—Ä—É–ø–ø—ã: {groups}'
    if message == '‚úÖ –î–∏–∞–ª–æ–≥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:':
        message = 'ü§î –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç'

    event.msg_op(2, message)
    return "ok"

@dp.longpoll_event_register('–º–µ—Å—Å–∞–≥–∞')
@dp.my_signal_event_register('–º–µ—Å—Å–∞–≥–∞')
def message(event: MySignalEvent) -> str:
    msg = ''
    if event.args != None:
        rng = int(event.args[0])
    else:
        rng = 1
    for _ in range(0, rng):
        msg += '·Ö†\n'
    event.msg_op(1, msg)
    return "ok"


@dp.my_signal_event_register('–ø–æ–≤—Ç–æ—Ä–∏')
def repeat(event: MySignalEvent) -> str:
    delay = 0.1
    if event.payload:
        delay = int(event.payload)
    site = " ".join(event.args)  # –ª–æ–ª, –∞ –ø–æ—á–µ–º—É –æ–Ω–æ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è?
    time.sleep(delay)
    event.msg_op(1, site)
    return "ok"

@dp.longpoll_event_register('—Å—Ç–∞—Ç—É—Å')
@dp.my_signal_event_register('—Å—Ç–∞—Ç—É—Å')
def status(event: MySignalEvent) -> str:
    status = " ".join(event.args) + ' ' + event.payload
    msg = event.msg_op(1, '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å...')
    try:
        event.api("status.set", text = status)
        event.msg_op(2, '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    except:
        event.msg_op(2, '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞')
    return "ok"


@dp.my_signal_event_register('–±–æ—Ç')
def imhere(event: MySignalEvent) -> str:
    event.msg_op(1, sticker_id=11247)
    return "ok"


@dp.my_signal_event_register('–∫—Ç–æ')
def whois(event: MySignalEvent) -> str:
    if event.args == None:
        event.msg_op(1, '–ö—Ç–æ?', reply_to = event.msg['id'])
        return "ok"
    var = event.api('utils.resolveScreenName', screen_name = event.args[0])
    type = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if var['type'] == 'user' else "–ì—Ä—É–ø–ø–∞" if var['type'] == 'group' else "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    event.msg_op(1, f"{type}\nID: {var['object_id']}")
    return "ok"

@dp.longpoll_event_register('—Ö–µ–ª–ø', 'help') #–ê–≤—Ç–æ—Ä: https://vk.com/id570532674, –î–æ—Ä–∞–±–æ—Ç–∞–ª: https://vk.com/id194861150
@dp.my_signal_event_register('—Ö–µ–ª–ø', 'help')
def a(event: MySignalEvent) -> str:
    event.msg_op(2, f''' üìó–ö–æ–º–∞–Ω–¥—ã IrCA Duty: vk.com/@ircaduty-comands
‚öô –£—Å—Ç–∞–Ω–æ–≤–∫–∞: https://vk.cc/c3coi7
üíª –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: https://vk.cc/bZPeP4
üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LP: https://vk.cc/c3cpNq
üìà –ö–æ–º–∞–Ω–¥—ã LP: https://vk.cc/c3cpUH
üìì –í–∞—à–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {db_gen.host}
–ï—Å–ª–∏ –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —ç—Ç–∏–º –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –ª—é–¥—è–º - https://vk.com/id365530525
https://vk.com/id194861150
https://vk.com/id449770994''')
    return "ok"

@dp.longpoll_event_register('–∂')
@dp.my_signal_event_register('–∂')
def zh(event: MySignalEvent) -> str:
    mes = event.payload
    rng = len(event.payload)
    if rng > 15:
        event.msg_op(1, '‚ùó –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ—Ç –ø—Ä–æ–∫—Ä—É—á–µ–Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é')
        rng = 15
    msg = event.msg_op(1, mes)
    for _ in range(rng):
        mes = mes[-1:] + mes[:-1]
        event.api.msg_op(2, event.chat.peer_id, mes, event.msg['id'])
        time.sleep(1)
    return "ok"
